name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      # Make sure CI fails on all warnings, including Clippy lints
      RUSTFLAGS: "-Dwarnings"

    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Show rust toolchain info
        shell: bash
        run: |
          rustup -V
          rustup default
          cargo -V
          rustc -V

      - name: Check formatting
        run: |
          cargo fmt --all -- --check

      - name: Lint
        run: |
          cargo clippy --all-targets --all-features -- -v

  build-test:
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    env:
      # Make sure CI fails on all warnings, including Clippy lints
      RUSTFLAGS: "-Dwarnings"

    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Build
        run: cargo build --workspace --all-targets --all-features --verbose

      - name: Test
        run: cargo test --all-targets --all-features

  coverage:
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false
    env:
      RUST_BACKTRACE: 1

    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly

      - name: "`grcov` ~ install"
        run: cargo install grcov

      # https://github.com/mozilla/grcov#example-how-to-generate-source-based-coverage-for-a-rust-project
      - name: "add source based coverage support"
        run: rustup component add llvm-tools-preview

      - name: Execute tests
        run: cargo test --no-fail-fast --locked --all-targets
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Cinstrument-coverage -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off"

      - name: Generate coverage data (via `grcov`)
        id: coverage
        shell: bash
        run: |
          ## Generate coverage data
          COVERAGE_REPORT_DIR="target/debug"
          COVERAGE_REPORT_FILE="${COVERAGE_REPORT_DIR}/lcov.info"
          echo "report=${COVERAGE_REPORT_FILE}" >> $GITHUB_OUTPUT
          mkdir -p "${COVERAGE_REPORT_DIR}"
          # display coverage files
          # grcov . --output-type files --ignore build.rs --ignore "/*" --ignore "[a-zA-Z]:/*" --ignore "**/tests/" --excl-br-line "^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\()" | sort --unique
          # generate coverage report
          grcov . -s . --binary-path ./target/debug/ --output-type lcov --output-path "${COVERAGE_REPORT_FILE}" --branch --ignore build.rs --ignore "/*" --ignore "[a-zA-Z]:/*" --ignore "**/tests/" --excl-start '#(\[cfg\(test\)\]|\[test\])' --excl-br-line "^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\()"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
